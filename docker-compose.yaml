services:
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5673:5672"      # AMQP  → localhost:5673
      - "15673:15672"    # UI    → http://localhost:15673
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: inventory
    ports:
      - "5434:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    command: [ "postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=4", "-c", "max_replication_slots=4" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d inventory"]
      interval: 10s
      timeout: 5s
      retries: 6

  debezium:
    image: quay.io/debezium/server:2.7
    container_name: debezium
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - debezium_data:/debezium/data
      - ./debezium/application.properties:/debezium/conf/application.properties:ro

  consumer:
    build:
      context: ./src/DebeziumPostgresRabbitmqConsumer      # Dockerfile lives here
    container_name: consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq              # inside the Docker network
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
    tty: true                              # keeps Console.ReadLine() blocking

volumes:
  pgdata:
  debezium_data:
